rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
  
  match /{document=**} {
      
      function isUserOwned(uid) {
      	return request.auth.uid == uid;
      }
      
      function isUserObject() {
        return request.resource.data.keys().hasAll([
          'name',
          'email'
        ]);
      }
      
      function costsMoreThanZero() {
        return request.resource.data.cost is number &&
               request.resource.data.cost > 0;
      }

      function dateIsNotUpdated() {
        return request.resource.data
          .diff(resource.data)
          .unchangedKeys()
          .hasOnly(['cost', 'category'])
      }

      function isCollaborator() {
        return get(/databases/$(database)/documents/admins/$(request.auth.uid)).role in ['admin', 'collaborator'];
      }

      match /users/{uid} {
         allow read, write: if isUserOwned(uid);
      }

      match /users/{uid} {
        allow read: if isUserOwned(uid);
        allow write: if isUserOwned(uid) && isUserObject();
      }

      match /expense/{expenseId} {
        allow read: if isUserOwned(resource.data.uid);
        allow write: if isUserOwned(resource.data.uid) && 
          costsMoreThanZero() && dateIsNotUpdated;
      }

      match /budgets/{budgetId} {
        allow read: if isCollaborator();
      }

    }
  }
}
